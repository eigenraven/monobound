/**
 * Utilities for working with Mono's C API.
 * 
 * License:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted,free of charge,to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use,reproduce,display,distribute,
 * execute,and transmit the Software,and to prepare derivative works of the
 * Software,and to permit third-parties to whom the Software is furnished to
 * do so,all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement,including
 * the above license grant,this restriction and the following disclaimer,
 * must be included in all copies of the Software,in whole or in part,and
 * all derivative works of the Software,unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
 * IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE,TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY,WHETHER IN CONTRACT,TORT OR OTHERWISE,
 * ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
module monobound.utils;

import derelict.mono.mono;
public import std.string;
import core.stdc.string;

/// Converts a Mono C string to a D string and frees the Mono object.
string monoOwnedCStrToD(const(char)* str) nothrow @trusted
{
	if (str is null)
		return "";
	string S = str[0 .. strlen(str)].idup;
	mono_free(cast(void*) str);
	return S;
}

immutable(wchar)* toWstringz(wstring str) nothrow @safe
{
	if (str.length == 0)
		return &"\0"w[0];
	if (str[$ - 1] != '\0')
		str ~= '\0';
	return &str[0];
}

wstring fromWstringz(const(wchar)* str) nothrow @trusted
{
	size_t len;
	for (; str[len] != '\0'; len++)
		len++;
	return cast(immutable) str[0 .. len];
}

/// The bool as it appears in function argument lists
alias monoBoolF = short;
/// The bool as it appears in structure definitions
alias monoBoolM = int;

/// Wrapper around a Mono pointer, frees it in the destructor.
struct MonoPtr(T)
{
	@disable this(this);
	T* ptr;
	alias ptr this;
	~this()
	{
		mono_free(cast(void*) ptr);
	}
}
